name: iOS starter workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build & Export
    runs-on: macos-12
    env:
      workspace: "github-actions-test.xcworkspace"
      scheme: "github-actions-test"
      destination: "generic/platform=iOS"
      archivePath: "Archive/github-actions-test.xcarchive"
      ipaPath: "Archive/ipa"
      configuration: "Beta"
      exportOptions: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        with: 
          path: |
            Pods
            # ~/Library/Caches/CocoaPods
            # ~/.cocoapods
          key: ${{ runner.os }}-cocoapods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-cocoapods-

      - name: CocoaPod Install
        run: |
          pod install

      # - name: Clean up keychain and provisioning profile
      #   if: ${{ always() }}
      #   run: |
      #     security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
      #     rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
      
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Archive
        run: |
          xcodebuild \
          -quiet -showBuildTimingSummary \
          -workspace "$workspace" \
          -scheme "$scheme" \
          -configuration "$configuration" \
          -archivePath "$archivePath" \
          -destination "$destination" \
          clean archive

      - name: Export
        run: |
          exportOptions="github-actions-test/SupportingFiles/Files/Config/ExportOptions/ExportOptions_${configuration}.plist"

          xcodebuild -exportArchive \
          -archivePath "$archivePath" \
          -exportPath "$ipaPath" \
          -exportOptionsPlist "$exportOptions"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: |
            Archive
            Pods
            
  release:
    needs: [build]
    runs-on: ubuntu-latest
    name: Distribution
    env:
      ipaPath: "Archive/ipa"
      ipaFile: ""
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifact

      - name: Find IPA File Name
        run: |
          ipaFullPath="$(find . -type f -iname "*.ipa" -exec ls "{}" +;)"
          ipaName=$(basename "$ipaFullPath")
          ipaFile="${{ github.event.inputs.ipaFile }}"
          ipaFile="${{ipaPath}}/${{ipaName}}"

          echo "ipaFile=${ipaFile}" >> $GITHUB_ENV

      - name: Names
        env:
          appcenterProject: "a101-kapida/A101-Kapida-iOS-Beta"
          group: "Testers"
        run: |
          ls Archive
          ls Archive/ipa

          echo "ipaFile: ${ipaFile}"
          echo "appcenterProject: ${appcenterProject}"
          echo "group: ${group}"


      - name: App Center Distribution
        uses: erawhctim/action-appcenter-cli@v1.0.2
        env:
          appcenterProject: "a101-kapida/A101-Kapida-iOS-Beta"
          group: "Testers"
        with:
          command: |
            appcenter distribute release --quiet --disable-telemetry  \
            --app "$appcenterProject"  \
            --file "$ipaFile"  \
            --group "$group"
          token: ${{secrets.APP_CENTER_TOKEN}}

      - name: Delete Artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: artifact


